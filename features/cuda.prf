# Based on:
# https://code.google.com/p/qmakecuda/
#
# Usage (either/or):
# (1) use CONFIG += cuda in your project
# (2) run qmake CONFIG+=cuda

load(path_utils)

NVCC = $$program_path(nvcc)
isEmpty(NVCC) {
  CUDA_HOME = $$[CUDA_HOME]
  NVCC      = $$CUDA_HOME/bin/nvcc
} else {
  CUDA_HOME = $$dirname(NVCC)
  CUDA_HOME = $$dirname(CUDA_HOME)
  NVCC      = nvcc
}
isEmpty(CUDA_HOME) {
  error(CUDA could not be found. \
        Make sure nvcc is in your PATH or CUDA_HOME environment variable \
        points to CUDA installation root.)
}

NVCC_FLAGS_DEBUG *= -g -G
CONFIG(release, debug|release):NVCC_FLAGS += $$NVCC_FLAGS_RELEASE
CONFIG(debug, debug|release):NVCC_FLAGS += $$NVCC_FLAGS_DEBUG

NVCC_CXXFLAGS = $$QMAKE_CXXFLAGS

# NVCC gets confused with libc++ on C++11
macx:c++11:NVCC_CXXFLAGS -= -stdlib=libc++

!isEmpty(NVCC_CXXFLAGS):NVCC_CXXFLAGS  = -Xcompiler $$join(NVCC_CXXFLAGS,",")
!isEmpty(INCLUDEPATH):  NVCC_CXXFLAGS += -I $$join(INCLUDEPATH,",")

cuda.input = CUDA_SOURCES
cuda.output = ${QMAKE_FILE_BASE}.o
cuda.commands = $$NVCC \
  $$NVCC_CXXFLAGS $$NVCC_OPTS $$NVCC_FLAGS \
  -c ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}
cuda.depend_command = $$NVCC \
  $$NVCC_CXXFLAGS $$NVCC_OPTS $$NVCC_FLAGS \
  -M $$CUDA_INC ${QMAKE_FILE_NAME}
cuda.dependency_type = TYPE_C
QMAKE_EXTRA_COMPILERS += cuda

# resolve lib64 on Linux
linux-* {
  *-64:CUDA_LIB      = $$CUDA_HOME/lib64
  else:*-32:CUDA_LIB = $$CUDA_HOME/lib
  else:isEqual(QT_ARCH, x86_64) {
    CUDA_LIB         = $$CUDA_HOME/lib64
  } else:CUDA_LIB    = $$CUDA_HOME/lib
} else:CUDA_LIB      = $$CUDA_HOME/lib

QMAKE_RPATHDIR          *= $$CUDA_LIB
!unix|macx:QMAKE_LFLAGS *= -Wl,-rpath,$$CUDA_LIB

INCLUDEPATH *= $$CUDA_HOME/include
LIBS        *= -L$$CUDA_LIB -lcudart
DEFINES     *= HAVE_CUDA

OTHER_FILES += $$CUDA_SOURCES
